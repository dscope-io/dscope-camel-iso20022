/* Generated by camel build tools - do NOT edit this file! */
package org.ic4j.camel;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ICEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ICEndpoint target = (ICEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "canisterid":
        case "canisterId": target.setCanisterId(property(camelContext, java.lang.String.class, value)); return true;
        case "effectivecanisterid":
        case "effectiveCanisterId": target.setEffectiveCanisterId(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "identitytype":
        case "identityType": target.setIdentityType(property(camelContext, java.lang.String.class, value)); return true;
        case "intype":
        case "inType": target.setInType(property(camelContext, java.lang.String.class, value)); return true;
        case "ingressexpiryduration":
        case "ingressExpiryDuration": target.setIngressExpiryDuration(property(camelContext, java.time.Duration.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "method": target.setMethod(property(camelContext, java.lang.String.class, value)); return true;
        case "outclass":
        case "outClass": target.setOutClass(property(camelContext, java.lang.String.class, value)); return true;
        case "outtype":
        case "outType": target.setOutType(property(camelContext, java.lang.String.class, value)); return true;
        case "pemfile":
        case "pemFile": target.setPemFile(property(camelContext, java.lang.String.class, value)); return true;
        case "transporttype":
        case "transportType": target.setTransportType(property(camelContext, java.lang.String.class, value)); return true;
        case "url": target.setUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "waitersleep":
        case "waiterSleep": target.setWaiterSleep(property(camelContext, java.lang.Integer.class, value)); return true;
        case "waitertimeout":
        case "waiterTimeout": target.setWaiterTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "canisterid":
        case "canisterId": return java.lang.String.class;
        case "effectivecanisterid":
        case "effectiveCanisterId": return java.lang.String.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "identitytype":
        case "identityType": return java.lang.String.class;
        case "intype":
        case "inType": return java.lang.String.class;
        case "ingressexpiryduration":
        case "ingressExpiryDuration": return java.time.Duration.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "method": return java.lang.String.class;
        case "outclass":
        case "outClass": return java.lang.String.class;
        case "outtype":
        case "outType": return java.lang.String.class;
        case "pemfile":
        case "pemFile": return java.lang.String.class;
        case "transporttype":
        case "transportType": return java.lang.String.class;
        case "url": return java.lang.String.class;
        case "waitersleep":
        case "waiterSleep": return java.lang.Integer.class;
        case "waitertimeout":
        case "waiterTimeout": return java.lang.Integer.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ICEndpoint target = (ICEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "canisterid":
        case "canisterId": return target.getCanisterId();
        case "effectivecanisterid":
        case "effectiveCanisterId": return target.getEffectiveCanisterId();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "identitytype":
        case "identityType": return target.getIdentityType();
        case "intype":
        case "inType": return target.getInType();
        case "ingressexpiryduration":
        case "ingressExpiryDuration": return target.getIngressExpiryDuration();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "method": return target.getMethod();
        case "outclass":
        case "outClass": return target.getOutClass();
        case "outtype":
        case "outType": return target.getOutType();
        case "pemfile":
        case "pemFile": return target.getPemFile();
        case "transporttype":
        case "transportType": return target.getTransportType();
        case "url": return target.getUrl();
        case "waitersleep":
        case "waiterSleep": return target.getWaiterSleep();
        case "waitertimeout":
        case "waiterTimeout": return target.getWaiterTimeout();
        default: return null;
        }
    }
}

